import{_ as s,c as a,b as p,o as t}from"./app-D8niMc1Q.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="字符串解码" tabindex="-1"><a class="header-anchor" href="#字符串解码"><span>字符串解码</span></a></h1><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p><p>示例 1：</p><p>输入：s = &quot;3[a]2[bc]&quot;</p><p>输出：&quot;aaabcbc&quot;</p><p>示例 2：</p><p>输入：s = &quot;3[a2[c]]&quot;</p><p>输出：&quot;accaccacc&quot;</p><p>示例 3：</p><p>输入：s = &quot;2[abc]3[cd]ef&quot;</p><p>输出：&quot;abcabccdcdcdef&quot;</p><p>示例 4：</p><p>输入：s = &quot;abc3[cd]xyz&quot;</p><p>输出：&quot;abccdcdcdxyz&quot;</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 30</li><li>s 由小写英文字母、数字和方括号 &#39;[]&#39; 组成</li><li>s 保证是一个 有效 的输入。</li><li>s 中所有整数的取值范围为 [1, 300]</li></ul><h1 id="题解" tabindex="-1"><a class="header-anchor" href="#题解"><span>题解</span></a></h1><p>利用栈先进后出的特性</p><p>每次遇到一个字符串的时候， 如果不是]，压入栈中 如果遇到],说明该需要解码了， 依次向前查找里面的内容，直到遇到[ 从[]里面的内容为需要重重复的内容 再往前遍历栈，查找数字 找到数字和字符串以后，再重新压入栈中，进行下一次的匹配</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">decodeString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 只要不是]都入栈</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 找到[]两者之间的内容</span></span>
<span class="line">            <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                content <span class="token operator">=</span> top <span class="token operator">+</span> content</span>
<span class="line">                top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 找到重复的数据</span></span>
<span class="line">            <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> </span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                number <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> number</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">let</span> newStr <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line">            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const i=s(e,[["render",c],["__file","字符串解码.html.vue"]]),u=JSON.parse('{"path":"/algorithm/%E6%A0%88/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81.html","title":"字符串解码","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740476529000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":1,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/栈/字符串解码.md"}');export{i as comp,u as data};
