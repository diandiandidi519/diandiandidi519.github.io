import{_ as n,c as a,b as p,o as e}from"./app-D8niMc1Q.js";const t={};function l(o,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="和为-k-的子数组" tabindex="-1"><a class="header-anchor" href="#和为-k-的子数组"><span>和为 K 的子数组</span></a></h1><p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k 的子数组的个数 。</p><p>子数组是数组中元素的连续非空序列。</p><p>示例 1：</p><p>输入：nums = [1,1,1], k = 2</p><p>输出：2</p><p>示例 2：</p><p>输入：nums = [1,2,3], k = 3</p><p>输出：2</p><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 2 * 104</li><li>-1000 &lt;= nums[i] &lt;= 1000</li><li>-107 &lt;= k &lt;= 107</li></ul><h1 id="暴力法" tabindex="-1"><a class="header-anchor" href="#暴力法"><span>暴力法</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"> <span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">subarraySum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> end <span class="token operator">=</span> start<span class="token punctuation">;</span> end <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                result<span class="token operator">++</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="前缀和哈希表" tabindex="-1"><a class="header-anchor" href="#前缀和哈希表"><span>前缀和哈希表</span></a></h1>`,14)]))}const i=n(t,[["render",l],["__file","和为K的子数组.html.vue"]]),r=JSON.parse('{"path":"/algorithm/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html","title":"和为 K 的子数组","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740290618000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":2,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/滑动窗口/和为K的子数组.md"}');export{i as comp,r as data};
