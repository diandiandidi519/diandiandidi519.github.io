import{_ as p,c as a,b as e,o as n}from"./app-CLd0BwWF.js";const s={};function l(m,t){return n(),a("div",null,t[0]||(t[0]=[e('<h1 id="最长递增子序列" tabindex="-1"><a class="header-anchor" href="#最长递增子序列"><span>最长递增子序列</span></a></h1><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>示例 1：</p><p>输入：nums = [10,9,2,5,3,7,101,18]</p><p>输出：4</p><p>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p><p>示例 2：</p><p>输入：nums = [0,1,0,3,2,3]</p><p>输出：4</p><p>示例 3：</p><p>输入：nums = [7,7,7,7,7,7,7]</p><p>输出：1</p><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 2500</li><li>-104 &lt;= nums[i] &lt;= 104</li></ul><p>进阶：</p><p>你能将算法的时间复杂度降低到 O(n log(n)) 吗?</p>',17)]))}const i=p(s,[["render",l],["__file","最长递增子序列.html.vue"]]),o=JSON.parse('{"path":"/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html","title":"最长递增子序列","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740658985000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":1,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/动态规划/最长递增子序列.md"}');export{i as comp,o as data};
