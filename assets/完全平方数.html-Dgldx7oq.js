import{_ as s,c as p,b as a,o as t}from"./app-x7oXx1JU.js";const e={};function o(l,n){return t(),p("div",null,n[0]||(n[0]=[a(`<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。</p><p>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p><p>示例 1：</p><p>输入：n = 12</p><p>输出：3</p><p>解释：12 = 4 + 4 + 4</p><p>示例 2：</p><p>输入：n = 13</p><p>输出：2</p><p>解释：13 = 4 + 9</p><p>提示：</p><ul><li>1 &lt;= n &lt;= 104</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><ol><li>状态定义</li></ol><p>定义 dp[i] 表示和为 i 的完全平方数的最少数量</p><ol start="2"><li>​ 状态转移方程</li></ol><p>对于每个 i，尝试用所有可能的完全平方数 j²（其中 j² ≤ i）来分解 i，并取最小值：</p><p>dp[i] = min(dp[i], dp[i - j²] + 1)</p><p>逻辑解释：</p><ul><li><p>j² 是当前选择的完全平方数，i - j² 是剩余部分。</p></li><li><p>dp[i - j²] 是剩余部分的最优解，加上 1 表示选择 j² 这个平方数</p></li></ul><p>首先初始化长度为 n+1 的数组 dp，每个位置都为 0</p><ol start="3"><li>状态初始化</li></ol><p>dp[0] = 0：和为 0 时不需要任何平方数。</p><p>其他 dp[i] 初始化为一个较大值（如 INT_MAX），表示初始未计算状态</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span></span>
<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span></span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">numSquares</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span></span>
<span class="line">  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细推演（以 n=12 为例）​</p><p>​ 初始化</p><p>dp = [0, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​ 逐步计算</p><p>​<strong>i=1</strong>:</p><p>j=1（1²=1）: dp[1] = dp[0] + 1 = 1</p><p>dp = [0, 1, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=2</strong>:</p><p>j=1: dp[2] = dp[1] + 1 = 2</p><p>dp = [0, 1, 2, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=3</strong>:</p><p>j=1: dp[3] = dp[2] + 1 = 3</p><p>dp = [0, 1, 2, 3, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=4</strong>:</p><p>j=1: dp[4] = dp[3] + 1 = 4</p><p>j=2（2²=4）: dp[4] = dp[0] + 1 = 1 → ​ 取最小值 1</p><p>dp = [0, 1, 2, 3, 1, ∞, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=5</strong>:</p><p>j=1: dp[5] = dp[4] + 1 = 2</p><p>j=2（4）: dp[5] = dp[1] + 1 = 2</p><p>dp = [0, 1, 2, 3, 1, 2, ∞, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=6</strong>:</p><p>j=1: dp[6] = dp[5] + 1 = 3</p><p>j=2: dp[6] = dp[2] + 1 = 3</p><p>dp = [0, 1, 2, 3, 1, 2, 3, ∞, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=7</strong>:</p><p>j=1: dp[7] = dp[6] + 1 = 4</p><p>j=2: dp[7] = dp[3] + 1 = 4</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, ∞, ∞, ∞, ∞, ∞]</p><p>​<strong>i=8</strong>:</p><p>j=1: dp[8] = dp[7] + 1 = 5</p><p>j=2: dp[8] = dp[4] + 1 = 2 → ​ 取最小值 2</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, ∞, ∞, ∞, ∞]</p><p>​<strong>i=9</strong>:</p><p>j=1: dp[9] = dp[8] + 1 = 3</p><p>j=2: dp[9] = dp[5] + 1 = 3</p><p>j=3（3²=9）: dp[9] = dp[0] + 1 = 1 → ​ 取最小值 1</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, ∞, ∞, ∞]</p><p>​<strong>i=10</strong>:</p><p>j=1: dp[10] = dp[9] + 1 = 2</p><p>j=2: dp[10] = dp[6] + 1 = 4</p><p>j=3: dp[10] = dp[1] + 1 = 2</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, ∞, ∞]</p><p>​<strong>i=11</strong>:</p><p>j=1: dp[11] = dp[10] + 1 = 3</p><p>j=2: dp[11] = dp[7] + 1 = 5</p><p>j=3: dp[11] = dp[2] + 1 = 3</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, ∞]</p><p>​<strong>i=12</strong>:</p><p>j=1: dp[12] = dp[11] + 1 = 4</p><p>j=2: dp[12] = dp[8] + 1 = 3 → ​ 取最小值 3</p><p>j=3: dp[12] = dp[3] + 1 = 4</p><p>dp = [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 3]</p><p>最终，dp[12] = 3，即最少需要 3 个完全平方数（如 4+4+4）。</p><p>​ 复杂度分析</p><p>​*时间复杂度: O(n√n)，外层循环 n 次，内层循环最多 √i 次。</p><p>​* 空间复杂度: O(n)，用于存储 dp 数组。</p>`,83)]))}const i=s(e,[["render",o],["__file","完全平方数.html.vue"]]),d=JSON.parse('{"path":"/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]}],"git":{"updatedTime":1741163975000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":3,"url":"https://github.com/wangshuya.wsy"}],"changelog":[{"hash":"47f3c366de1ee4cd419369819e9d621fe969f933","date":1741163975000,"email":"wangshuya.wsy@bytedance.com","author":"wangshuya.wsy","message":"feat: 动态规划调整"},{"hash":"515d7260ab0339dfa77d87dd97b4f3c95a99120a","date":1740999754000,"email":"wangshuya.wsy@bytedance.com","author":"wangshuya.wsy","message":"feat: 动态规划专题"},{"hash":"ebde00855f1502705b421d44b1b339d4191c7c32","date":1740143556000,"email":"wangshuya.wsy@bytedance.com","author":"wangshuya.wsy","message":"feat: 添加常见算法和js手写"}]},"filePathRelative":"algorithm/动态规划/完全平方数.md"}');export{i as comp,d as data};
