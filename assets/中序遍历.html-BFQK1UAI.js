import{_ as s,c as a,b as p,o as t}from"./app-DT1UTma3.js";const e="/assets/inorder_1-BTvf9DnI.jpg",o={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h1><p>给定一个二叉树的根节点 root ，返回 它的 <strong>中序</strong> 遍历 。</p><p><strong>中序</strong>遍历指的是先访问左边的孩子，再访问父节点，最后访问右边的孩子</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> root = [1,null,2,3]</p><p><img src="'+e+`" alt="二叉树"></p><p>输出：[1,3,2]</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> root = []</p><p><strong>输出：</strong>[]</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> root = [1]</p><p><strong>输出：</strong>[1]</p><p><strong>提示：</strong></p><ul><li><p>树中节点数目在范围 [0, 100] 内</p></li><li><p>-100 &lt;= Node.val &lt;= 100</p></li></ul><h1 id="递归实现遍历" tabindex="-1"><a class="header-anchor" href="#递归实现遍历"><span>递归实现遍历</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">inOrderTraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中n为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到O(n)的级别。</p></li></ul><h1 id="栈实现遍历" tabindex="-1"><a class="header-anchor" href="#栈实现遍历"><span>栈实现遍历</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">inOrderTraversal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 遇到左节点不停的压栈</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 左节点为空了，说明该向上查找访问父节点</span></span>
<span class="line">        root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 访问父节点以后，再访问右孩子，进行下一轮的查找</span></span>
<span class="line">        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中n为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到O(n)的级别。</p></li></ul>`,23)]))}const r=s(o,[["render",l],["__file","中序遍历.html.vue"]]),u=JSON.parse('{"path":"/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.html","title":"题目描述","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740143556000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":1,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/二叉树/中序遍历.md"}');export{r as comp,u as data};
