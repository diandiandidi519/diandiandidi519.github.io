import{_ as n,c as a,b as p,o as e}from"./app-DT1UTma3.js";const t={};function o(c,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="最长回文子串" tabindex="-1"><a class="header-anchor" href="#最长回文子串"><span>最长回文子串</span></a></h1><p>给你一个字符串 s，找到 s 中最长的 回文 子串。</p><p>示例 1：</p><p>输入：s = &quot;babad&quot;</p><p>输出：&quot;bab&quot;</p><p>解释：&quot;aba&quot; 同样是符合题意的答案。</p><p>示例 2：</p><p>输入：s = &quot;cbbd&quot;</p><p>输出：&quot;bb&quot;</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s 仅由数字和英文字母组成</li></ul><h1 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h1><p>方法思路</p><p>定义状态：使用二维数组 dp[i][j] 表示字符串 s 从索引 i 到 j 的子串是否为回文。</p><p>状态转移方程：</p><p>如果 s[i] != s[j]，则 dp[i][j] = false。</p><p>如果 s[i] == s[j]：</p><p>当子串长度 ≤ 3 时，直接判定为回文。</p><p>否则，dp[i][j] 取决于 dp[i+1][j-1] 是否为回文。</p><p>初始化：所有长度为 1 的子串都是回文。</p><p>遍历顺序：按子串长度从小到大遍历，填充 dp 数组并更新最长回文子串的起始位置和长度。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> dp <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化所有长度为1的子串为回文</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 遍历所有可能的子串长度</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token constant">L</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token constant">L</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token constant">L</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token constant">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 子串结束索引</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">L</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 更新最长回文子串信息</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">L</span> <span class="token operator">&gt;</span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                maxLen <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">;</span></span>
<span class="line">                start <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="示例推演过程" tabindex="-1"><a class="header-anchor" href="#示例推演过程"><span>示例推演过程</span></a></h1><p>我们以示例1 <code>s = &quot;babad&quot;</code> 为例，逐步演示动态规划表格的填充过程，并观察最长回文子串的发现过程。</p><hr><h4 id="步骤1-初始化" tabindex="-1"><a class="header-anchor" href="#步骤1-初始化"><span><strong>步骤1：初始化</strong></span></a></h4><p>所有长度为1的子串都是回文（即 <code>dp[i][i] = true</code>）：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">索引 | 0(b) | 1(a) | 2(b) | 3(a) | 4(d)</span>
<span class="line">------------------------------------------</span>
<span class="line">0(b) | T    |      |      |      |     </span>
<span class="line">1(a) |      | T    |      |      |     </span>
<span class="line">2(b) |      |      | T    |      |     </span>
<span class="line">3(a) |      |      |      | T    |     </span>
<span class="line">4(d) |      |      |      |      | T   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="步骤2-遍历长度为2的子串-l-2" tabindex="-1"><a class="header-anchor" href="#步骤2-遍历长度为2的子串-l-2"><span><strong>步骤2：遍历长度为2的子串（L=2）</strong></span></a></h4><p>检查所有长度为2的子串是否为回文：</p><ul><li><code>i=0, j=1</code>：<code>s[0]=b</code> vs <code>s[1]=a</code> → <strong>不匹配</strong> → <code>dp[0][1] = false</code></li><li><code>i=1, j=2</code>：<code>s[1]=a</code> vs <code>s[2]=b</code> → <strong>不匹配</strong> → <code>dp[1][2] = false</code></li><li><code>i=2, j=3</code>：<code>s[2]=b</code> vs <code>s[3]=a</code> → <strong>不匹配</strong> → <code>dp[2][3] = false</code></li><li><code>i=3, j=4</code>：<code>s[3]=a</code> vs <code>s[4]=d</code> → <strong>不匹配</strong> → <code>dp[3][4] = false</code></li></ul><p>此时表格无变化，最长回文仍为1。</p><hr><h4 id="步骤3-遍历长度为3的子串-l-3" tabindex="-1"><a class="header-anchor" href="#步骤3-遍历长度为3的子串-l-3"><span><strong>步骤3：遍历长度为3的子串（L=3）</strong></span></a></h4><p>检查所有长度为3的子串是否为回文：</p><ul><li><p><code>i=0, j=2</code>：<code>s[0]=b</code> vs <code>s[2]=b</code> → <strong>匹配</strong><br> 中间子串 <code>dp[1][1] = true</code> → <code>dp[0][2] = true</code><br> 更新最长回文：<code>start=0</code>, <code>maxLen=3</code></p></li><li><p><code>i=1, j=3</code>：<code>s[1]=a</code> vs <code>s[3]=a</code> → <strong>匹配</strong><br> 中间子串 <code>dp[2][2] = true</code> → <code>dp[1][3] = true</code><br> 更新最长回文：<code>start=1</code>, <code>maxLen=3</code></p></li><li><p><code>i=2, j=4</code>：<code>s[2]=b</code> vs <code>s[4]=d</code> → <strong>不匹配</strong> → <code>dp[2][4] = false</code></p></li></ul><p>更新后的表格：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">索引 | 0(b) | 1(a) | 2(b) | 3(a) | 4(d)</span>
<span class="line">------------------------------------------</span>
<span class="line">0(b) | T    | F    | T    |      |     </span>
<span class="line">1(a) |      | T    | F    | T    |     </span>
<span class="line">2(b) |      |      | T    | F    | F   </span>
<span class="line">3(a) |      |      |      | T    | F   </span>
<span class="line">4(d) |      |      |      |      | T   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="步骤4-遍历长度为4的子串-l-4" tabindex="-1"><a class="header-anchor" href="#步骤4-遍历长度为4的子串-l-4"><span><strong>步骤4：遍历长度为4的子串（L=4）</strong></span></a></h4><p>检查所有长度为4的子串是否为回文：</p><ul><li><code>i=0, j=3</code>：<code>s[0]=b</code> vs <code>s[3]=a</code> → <strong>不匹配</strong> → <code>dp[0][3] = false</code></li><li><code>i=1, j=4</code>：<code>s[1]=a</code> vs <code>s[4]=d</code> → <strong>不匹配</strong> → <code>dp[1][4] = false</code></li></ul><p>表格无变化，最长回文仍为3。</p><hr><h4 id="步骤5-遍历长度为5的子串-l-5" tabindex="-1"><a class="header-anchor" href="#步骤5-遍历长度为5的子串-l-5"><span><strong>步骤5：遍历长度为5的子串（L=5）</strong></span></a></h4><p>检查整个字符串是否为回文：</p><ul><li><code>i=0, j=4</code>：<code>s[0]=b</code> vs <code>s[4]=d</code> → <strong>不匹配</strong> → <code>dp[0][4] = false</code></li></ul><p>最终表格：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">索引 | 0(b) | 1(a) | 2(b) | 3(a) | 4(d)</span>
<span class="line">------------------------------------------</span>
<span class="line">0(b) | T    | F    | T    | F    | F   </span>
<span class="line">1(a) |      | T    | F    | T    | F   </span>
<span class="line">2(b) |      |      | T    | F    | F   </span>
<span class="line">3(a) |      |      |      | T    | F   </span>
<span class="line">4(d) |      |      |      |      | T   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="最终结果" tabindex="-1"><a class="header-anchor" href="#最终结果"><span><strong>最终结果</strong></span></a></h4><p>最长回文子串长度为3，有两个候选：</p><ul><li><code>s.substring(0, 3) = &quot;bab&quot;</code></li><li><code>s.substring(1, 4) = &quot;aba&quot;</code></li></ul><p>代码会返回第一个找到的（即 <code>start=0</code>），但根据示例解释两者均有效。动态规划的遍历顺序可能影响最终结果，但题目接受任意正确答案。</p>`,55)]))}const i=n(t,[["render",o],["__file","最长回文子串.html.vue"]]),d=JSON.parse('{"path":"/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html","title":"最长回文子串","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740834724000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":2,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/动态规划/最长回文子串.md"}');export{i as comp,d as data};
