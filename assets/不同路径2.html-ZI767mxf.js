import{_ as a,c as i,b as p,o as e}from"./app-D8niMc1Q.js";const s="/assets/robot1-BBX4U6ho.jpg",l="/assets/robot2-uB8iNKqn.jpg",o={};function r(n,t){return e(),i("div",null,t[0]||(t[0]=[p('<h1 id="不同路径-ii" tabindex="-1"><a class="header-anchor" href="#不同路径-ii"><span>不同路径 II</span></a></h1><p>给定一个 m x n 的整数数组 grid。一个机器人初始位于 左上角（即 grid[0][0]）。机器人尝试移动到 右下角（即 grid[m - 1][n - 1]）。机器人每次只能向下或者向右移动一步。</p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。机器人的移动路径中不能包含 任何 有障碍物的方格。</p><p>返回机器人能够到达右下角的不同路径数量。</p><p>测试用例保证答案小于等于 2 * 109。</p><p>示例 1：</p><p><img src="'+s+'" alt="robot1"></p><p>输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</p><p>输出：2</p><p>解释：3x3 网格的正中间有一个障碍物。</p><p>从左上角到右下角一共有 2 条不同的路径：</p><ol><li><p>向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</p></li><li><p>向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</p></li></ol><p>示例 2：</p><p><img src="'+l+'" alt="robot2"></p><p>输入：obstacleGrid = [[0,1],[0,0]]</p><p>输出：1</p><p>提示：</p><ul><li>m == obstacleGrid.length</li><li>n == obstacleGrid[i].length</li><li>1 &lt;= m, n &lt;= 100</li><li>obstacleGrid[i][j] 为 0 或 1</li></ul><h1 id="题解" tabindex="-1"><a class="header-anchor" href="#题解"><span>题解</span></a></h1>',19)]))}const m=a(o,[["render",r],["__file","不同路径2.html.vue"]]),h=JSON.parse('{"path":"/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%842.html","title":"不同路径 II","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1740999754000,"contributors":[{"name":"wangshuya.wsy","username":"wangshuya.wsy","email":"wangshuya.wsy@bytedance.com","commits":1,"url":"https://github.com/wangshuya.wsy"}]},"filePathRelative":"algorithm/动态规划/不同路径2.md"}');export{m as comp,h as data};
